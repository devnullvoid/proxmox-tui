run:
  timeout: 5m
  issues-exit-code: 1
  tests: true

output:
  formats:
    - format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

linters-settings:
  govet:
    enable:
      - shadow

  gocyclo:
    min-complexity: 15

  dupl:
    threshold: 100

  goconst:
    min-len: 2
    min-occurrences: 2

  depguard:
    rules:
      main:
        deny:
          - pkg: github.com/sirupsen/logrus
            desc: "logging is allowed only by logutils.Log"

  misspell:
    locale: US

  lll:
    line-length: 140

  goimports:
    local-prefixes: github.com/devnullvoid/proxmox-tui

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc

  funlen:
    lines: 100
    statements: 50

  gci:
    sections:
      - standard
      - default
      - prefix(github.com/devnullvoid/proxmox-tui)

linters:
  disable-all: true
  enable:
    - bodyclose
    - dupl
    - errcheck
    - exportloopref
    - funlen
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - gofmt
    - goimports
    - gomnd
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - nakedret
    - noctx
    - nolintlint
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - whitespace

issues:
  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd
        - funlen
        - goconst

    - path: cmd/
      linters:
        - gochecknoinits

    - linters:
        - lll
      source: "^//go:generate "

  exclude-use-default: false
  exclude:
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked

    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)

    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop

    # gosec: Too many false-positives on 'unsafe' usage
    - (G103|G104|G204|G301|G302|G304|G401|G501|G502)

    # gosec: These only make sense when scoped to a specific package, and they would be annoying to fix
    - (G201|G202)

  max-issues-per-linter: 0
  max-same-issues: 0
  new: false 